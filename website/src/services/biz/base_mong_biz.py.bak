#!/usr/bin/env python 
#  -*- coding: utf-8 -*-

'''
+-------------------------------------------------
@Author:        cc
@Contact:       yaochen@xjh.com
@Site:          http://www.xjh.com
@Project:       sobookscrawler
@File:          base_mongo_biz.py.bak
@Version:       
@Time:          2019-06-11 14:13
@Description:   TO-DO
+-------------------------------------------------
@Change Activity:
1.  Created at  2019-06-11 14:13
2.  TO-DO
+-------------------------------------------------
'''
__author__ = 'cc'

from datetime import datetime

from entities.base_model import BaseModel


class BaseMongoBiz(object):
	@classmethod
	def check_args(cls, model):
		if None is model:
			raise ValueError('Invalid argument(s) `model`.')

	@classmethod
	def add(cls, model):
		cls.check_args(model)

		# Set `inTime` field with current time
		model.inTime = datetime.now().utcnow()
		# Do insert
		model.save()

		return model

	@classmethod
	def update_by_entity(cls, old_entity, new_entity):
		cls.check_args(old_entity)
		cls.check_args(new_entity)

		# Set `id` field with old entity's id
		new_entity.id = old_entity.id
		# Set `inTime` field with old entity's time
		new_entity.inTime = old_entity.inTime
		# Set `editTime` field with current time
		new_entity.editTime = datetime.now().utcnow()
		# Do update
		new_entity = new_entity.save()

		return new_entity, 1

	@classmethod
	def count(cls, criteria):
		return BaseModel.objects(__raw__=criteria).count()

	@classmethod
	def find_one(cls, criteria={}, sort=None):
		query = BaseModel.objects(__raw__=criteria)
		if sort:
			query = query.order_by(sort)
		return query

	@classmethod
	def find(cls, criteria={}, sort=None, skip=None, limit=None):
		query = BaseModel.objects(__raw__=criteria)
		if sort:
			query = query.order_by(sort)
		if skip:
			query = query.skip(skip)
		if limit:
			query = query.limit(limit)
		return query
